top = '.'
out = 'build'

def options(opt):
    opt.load('python')
    opt.load('cython')
    opt.load('compiler_c')
    opt.load('compiler_fc')

def configure(conf):
    conf.load('compiler_fc')
    conf.check_fortran()
    conf.check_fortran_verbose_flag()
    conf.check_fortran_clib()

    conf.load('compiler_c')
    conf.load('python')
    conf.load('cython')

    # TODO: what is the minimim CPython version supported?
    conf.check_python_version((2,4,0))
    conf.check_python_headers()
    conf.check_python_module('numpy')
    conf.check_numpy_version(minver=(1,3))
    conf.get_numpy_includes()

    conf.add_os_flags('FCFLAGS')

def build(bld):
    install_path = '${PYTHONDIR}/scipy/special'

    def bld_lib(features, glob, cflags, target, use=None):
        use = use or []
        use = 'PYEXT NUMPY'.split() + use
        bld(
            features = features,
            source   = bld.path.ant_glob(glob),
            cflags   = cflags,
            target   = target,
            use      = use,
            install_path = install_path
            )

    # Python files
    bld(features='py', source=bld.path.ant_glob('*.py'),
        install_path=install_path)

    # C libraries
    bld_lib('c cstlib', 'cephes/*.c', bld.env.CFLAGS_cshlib, 'stcephes')
    bld_lib('c cstlib', 'c_misc/*.c', bld.env.CFLAGS_cshlib, 'stc_misc')

    # fortran libraries
    bld_lib('fc fcstlib', 'mach/*.f',    bld.env.CFLAGS_fcshlib, 'stmach', ['CLIB'])
    bld_lib('fc fcstlib', 'toms/*.f',    bld.env.CFLAGS_fcshlib, 'sttoms', ['CLIB'])
    bld_lib('fc fcstlib', 'amos/*.f',    bld.env.CFLAGS_fcshlib, 'stamos', ['CLIB'])
    bld_lib('fc fcstlib', 'cdflib/*.f',  bld.env.CFLAGS_fcshlib, 'stcdf', ['CLIB'])
    bld_lib('fc fcstlib', 'specfun/*.f', bld.env.CFLAGS_fcshlib, 'stspecfunlib', ['CLIB'])

    # Cython extensions
    bld(
        features = 'c cshlib pyext',
        source   = 'orthogonal_eval.pyx',
        target   = 'orthogonal_eval',
        use = 'NUMPY',
        install_path = install_path,
        )

    bld(
        features = 'c cshlib pyext',
        source   = 'lambertw.pyx',
        target   = 'lambertw',
        use = 'NUMPY',
        install_path = install_path,
        )

    cephes_src = ['_cephesmodule.c', 'amos_wrappers.c', 'specfun_wrappers.c',
                  'toms_wrappers.c','cdf_wrappers.c','ufunc_extras.c']

    bld(
        features = 'c cshlib pyext',
        source   = cephes_src,
        target   = '_cephes',
        use      = 'stamos sttoms stc_misc stcephes stmach stcdf stspecfunlib',
        install_path = install_path,
        )

    bld(
        features = 'fc c cshlib pyext',
        source   = 'specfun.pyx specfun_fc.f',
        target = 'specfun',
        includes = '.',
        use    = 'stspecfunlib NUMPY CLIB fcshlib',
        install_path = install_path,
        )

#-----------------------------------------------------------------------------
# configuration helper functions
#-----------------------------------------------------------------------------
from waflib.Configure import conf

@conf
def check_numpy_version(conf, minver, maxver=None):
    conf.start_msg("Checking numpy version")
    minver = tuple(minver)
    if maxver: maxver = tuple(maxver)
    (np_ver_str,) = conf.get_python_variables(conf.env['PYTHON'],
            ['numpy.version.short_version'], ['import numpy'])
    np_ver = tuple([int(x) for x in np_ver_str.split('.')])
    if np_ver < minver or (maxver and np_ver > maxver):
        conf.end_msg(False)
        conf.fatal("numpy version %s is not in the "
                "range of supported versions: minimum=%s, maximum=%s" %
                (np_ver_str, minver, maxver))
    conf.end_msg(str(np_ver))

@conf
def get_numpy_includes(conf):
    conf.start_msg("Checking numpy includes")
    (np_includes,) = conf.get_python_variables(conf.env['PYTHON'],
            ['numpy.get_include()'], ['import numpy'])
    conf.env.INCLUDES_NUMPY = np_includes
    conf.end_msg('ok (%s)' % np_includes)

# vim:ft=python
