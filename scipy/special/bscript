import copy
from distutils import sysconfig

from numpy.distutils.misc_util \
    import \
        get_pkg_info

from bento.commands.hooks \
    import \
        pre_build

@pre_build
def mybuild(ctx):
    math_info = get_pkg_info("npymath")
    # FIXME: This will break as soon as there are spaces in libraries
    # names or paths (no quote handling). Having this feature in yaku
    # wuold be useful, to handle pkg-config.
    npymath_linkflags = math_info.libs().split()
    npymath_cflags = math_info.cflags().split()

    clib_env = {"CPPPATH": [sysconfig.get_python_inc()],
                "CFLAGS": npymath_cflags}
    for name in ctx.local_pkg.compiled_libraries:
        ctx.register_clib_environment(name, clib_env)

    pyext_env = {"CPPPATH": [sysconfig.get_python_inc()],
                 "CFLAGS": npymath_cflags,
                 "PYEXT_SHLINKFLAGS": npymath_linkflags}
    pyext_env["PYEXT_SHLINKFLAGS"].extend(
            ctx.yaku_build_ctx.env["FC_RUNTIME_LDFLAGS"])
    ctx.register_environment("orthogonal_eval", pyext_env)
    ctx.register_environment("lambertw", pyext_env)

    cephes_env = copy.deepcopy(pyext_env)
    cephes_env["PYEXT_LIBDIR"] = [
            ctx.local_node.path_from(ctx.top_node)]
    cephes_env["PYEXT_LIBS"] = ['sc_amos', 'sc_toms', 'sc_c_misc',
            'sc_cephes', 'sc_mach', 'sc_cdf', 'sc_specfunlib']
    ctx.register_environment("_cephes", cephes_env)

    specfun_env = copy.deepcopy(pyext_env)
    specfun_env["PYEXT_LIBDIR"] = [
            ctx.local_node.path_from(ctx.top_node)]
    specfun_env["PYEXT_LIBS"] = ['sc_specfunlib']
    ctx.register_environment("specfun", specfun_env)
