from numpy.distutils.from_template \
    import \
        process_str

from bento.commands.hooks \
    import \
        pre_build, post_configure
from yaku.task_manager \
    import \
        set_file_hook, get_extension_hook, set_extension_hook
from yaku.task \
    import \
        Task

def hook(ctx, node):
    return f_src_template_task(ctx, node)

def f_src_template_task(self, node):
    out = node.change_ext("")
    target = node.parent.declare(out.name)
    task = Task("numpy_f_template", inputs=[node], outputs=[target])
    task.gen = self
    task.env_vars = []
    task.env = self.env

    def yo(t):
        cnt = t.inputs[0].read()
        print "F TEMPLATE: %s -> %s" % (t.inputs[0], t.outputs[0])
        t.outputs[0].write(process_str(cnt))

    task.func = yo
    return [task]

@pre_build
def mybuild(ctx):
    bld = ctx.yaku_build_ctx
    ldir = ctx.local_node.path_from(ctx.top_node)

    env = {"PYEXT_SHLINKFLAGS": bld.env["FC_RUNTIME_LDFLAGS"][:]}
    for flag in bld.env["LAPACK"]:
        var = env.get("PYEXT_%s" % flag, [])
        var.extend(bld.env["LAPACK"][flag][:])
        env["PYEXT_%s" % flag] = var

    def builder(bld, extension, verbose):
        builder = bld.builders["pyext"].extension
        old_hook = get_extension_hook(".src")
        try:
            set_extension_hook(".src", hook)
            tasks = builder(extension.name, extension.sources, env)
            return tasks
        finally:
            set_extension_hook(".src", old_hook)
    ctx.register_builder("_iterative", builder)
