import os
import sys
import copy

try:
    import numpy
except ImportError:
    raise ValueError("You should install numpy before building scipy")

from numpy.distutils.misc_util import get_numpy_include_dirs
from bento.commands.hooks \
    import \
        post_configure, pre_build, post_build
from bento.installed_package_description \
    import \
        InstalledSection
from yaku.conftests.conftests \
    import \
        check_compiler
from yaku.conftests.fconftests \
    import \
        check_fortran_verbose_flag, check_fortran_runtime_flags, check_fcompiler

def check_archs(cfg):
    archs = {"i386": False, "x86_64": False, "ppc": False, "ppc64": False}
    for arch in archs:
        old_cflags = copy.deepcopy(cfg.env["CFLAGS"])
        old_linkflags = copy.deepcopy(cfg.env["LINKFLAGS"])
        try:
            cfg.env["CFLAGS"].extend(["-arch", arch])
            cfg.env["LINKFLAGS"].extend(["-arch", arch])
            if check_compiler(cfg, "Checking whether gcc supports arch %s" % arch):
                archs[arch] = True
        finally:
            cfg.env["CFLAGS"] = old_cflags
            cfg.env["LINKFLAGS"] = old_linkflags

    for arch in archs:
        if archs[arch]:
            old_fflags = copy.deepcopy(cfg.env["F77FLAGS"])
            old_linkflags = copy.deepcopy(cfg.env["LINKFLAGS"])
            try:
                cfg.env["F77FLAGS"].extend(["-arch", arch])
                cfg.env["LINKFLAGS"].extend(["-arch", arch])
                if check_fcompiler(cfg, "Checking whether gfortran supports arch %s" % arch):
                    archs[arch] = True
            finally:
                cfg.env["F77FLAGS"] = old_fflags
                cfg.env["LINKFLAGS"] = old_linkflags

    return archs.keys()

@post_configure
def myconfigure(ctx):
    cfg = ctx.yaku_configure_ctx

    cfg.use_tools(["ctasks", "pyext", "fortran", "tpl_tasks"])
    cfg.use_tools(["cxxtasks"])
    cfg.use_tools(["numpy_templates"], ["."])
    cfg.use_tools(["f2py_tool"], ["."])

    cfg.env["PYEXT_CPPPATH"].extend(get_numpy_include_dirs())

    if sys.platform == "darwin":
        cfg.env["BLAS"] = {"FRAMEWORKS": ["Accelerate"]}
        cfg.env["LAPACK"] = {"FRAMEWORKS": ["Accelerate"]}

        for arch in ["i386"]:
            cfg.env["F77FLAGS"].extend(["-arch", arch])
            cfg.env["CFLAGS"].extend(["-arch", arch])
            cfg.env["LINKFLAGS"].extend(["-arch", arch])
    else:
        cfg.env["BLAS"] = {"LIBS": ["f77blas", "cblas", "atlas"]}
        cfg.env["LAPACK"] = {"LIBS": ["lapack", "f77blas",
                                      "cblas", "atlas"]}

    cfg.env["SUBST_DICT"] = {"SHORT_VERSION": "'0.8.0'",
                             "VERSION": "'0.8.0'",
                             "RELEASE": "False"}
    for f in ["CFLAGS", "PYEXT_CFLAGS", "PYEXT_CXXFLAGS", "CXXFLAGS", "F77FLAGS"]:
        cfg.env[f].append("-fPIC")
    check_fortran_verbose_flag(cfg)
    check_fortran_runtime_flags(cfg)

@pre_build
def mybuild(ctx):
    bld = ctx.yaku_build_ctx
    if "-v" in sys.argv:
        bld.env["VERBOSE"] = False
    else:
        bld.env["F2PYFLAGS"].append("--quiet")
        bld.env["VERBOSE"] = True

    templater = ctx.yaku_build_ctx.builders["tpl_tasks"]
    tasks = templater.build("version", ["scipy/version.py.in"])
    tasks += templater.build("__config__", ["scipy/__config__.py.in"])

    section_writer = ctx.cmd.section_writer
    section = InstalledSection(
                  "gen_pythonfiles",
                  "library",
                  os.path.join("$_srcrootdir",
                               ctx.yaku_build_ctx.env["BLDDIR"]),
                  "$sitedir",
                  [os.path.join("scipy", "version.py"),
                   os.path.join("scipy", "__config__.py")])
    section_writer.sections["pythonfiles"]["gen_files"] = section
